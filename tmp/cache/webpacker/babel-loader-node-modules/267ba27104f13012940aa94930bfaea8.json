{"ast":null,"code":"var _jsxFileName = \"/Volumes/Work/work/dev/project/projects/halo/app/javascript/src/marketplace/components/ResultsList/ResultsList.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { intersection } from 'lodash';\nimport { css, StyleSheet } from 'aphrodite';\nimport { Button, Grid } from \"semantic-ui-react\";\nimport { COLORS } from '../../../../constants';\nimport { saveRFP as saveRFPAction, unsaveRFP as unsaveRFPAction, initializeSaveRFPs as initializeSaveRFPsAction, updateResultList as updateResultListAction } from '../../actions/defaultActions';\nimport ResultRow from '../ResultRow';\nvar styles = StyleSheet.create({\n  ResultsList_noResultsText: {\n    textAlign: 'center',\n    fontSize: '14px'\n  },\n  ResultsList_resultRow: {\n    textDecoration: 'none'\n  }\n});\n\nvar ResultsList =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ResultsList, _PureComponent);\n\n  function ResultsList(props) {\n    var _this;\n\n    _classCallCheck(this, ResultsList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultsList).call(this, props));\n\n    _this.componentWillMount = function () {\n      var initializeSaveRFPs = _this.props.initializeSaveRFPs;\n      initializeSaveRFPs(gon.saved_rfps || {});\n\n      _this.filterResults();\n    };\n\n    _this.filterResults = function () {\n      var _this$props = _this.props,\n          _this$props$filters = _this$props.filters,\n          researchArea = _this$props$filters.researchArea,\n          innovationType = _this$props$filters.innovationType,\n          savedRFPs = _this$props.savedRFPs,\n          searchTerm = _this$props.searchTerm,\n          onlySaved = _this$props.onlySaved,\n          onlyPartners = _this$props.onlyPartners,\n          company = _this$props.company;\n      var filteredResults = gon.rfp_results.filter(function (result) {\n        var hasResearchArea = true;\n\n        if (researchArea && researchArea.length > 0) {\n          hasResearchArea = researchArea.map(function (ra) {\n            return gon.areas_of_expertise_mapping[ra];\n          }).includes(result.therapeutic_area);\n        }\n\n        var hasInnovationType = true;\n\n        if (innovationType && innovationType.length > 0) {\n          hasInnovationType = intersection(innovationType.map(function (it) {\n            return gon.innovation_type_mapping[it];\n          }), result.innovation_types.map(function (it) {\n            return it.value;\n          })).length > 0;\n        }\n\n        var matchesTitle = true;\n        var re = new RegExp(_.escapeRegExp(searchTerm), 'i');\n\n        var isMatch = function isMatch(result) {\n          return re.test(result.title);\n        };\n\n        if (searchTerm.length > 0) {\n          matchesTitle = isMatch(result);\n        }\n\n        var isSaved = true;\n\n        if (onlySaved) {\n          isSaved = savedRFPs[result.id] ? true : false;\n        }\n\n        var isPartner = true;\n\n        if (onlyPartners) {\n          isPartner = result.company.is_partner;\n        }\n\n        var isCompany = true;\n\n        if (company) {\n          isCompany = result.company.id === company.id;\n        }\n\n        return hasResearchArea && hasInnovationType && matchesTitle && isSaved && isPartner && isCompany;\n      });\n\n      _this.setState({\n        filteredResults: filteredResults\n      });\n    };\n\n    _this.state = {\n      filteredResults: []\n    };\n    return _this;\n  }\n\n  _createClass(ResultsList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props2 = this.props,\n          resultList = _this$props2.resultList,\n          updateResultList = _this$props2.updateResultList;\n\n      if (prevProps !== this.props) {\n        this.filterResults();\n      }\n\n      if (prevState.filteredResults != this.state.filteredResults && resultList.length !== this.state.filteredResults.length) {\n        updateResultList(this.state.filteredResults);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          isUpdatingSaveRFP = _this$props3.isUpdatingSaveRFP,\n          savedRFPs = _this$props3.savedRFPs,\n          saveRFP = _this$props3.saveRFP,\n          unsaveRFP = _this$props3.unsaveRFP,\n          resultList = _this$props3.resultList;\n      var filteredResults = this.state.filteredResults;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, filteredResults.length === 0 && React.createElement(\"div\", {\n        className: css(styles.ResultsList_noResultsText),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"No results match these filters\"), filteredResults.map(function (rfp) {\n        return React.createElement(Link, {\n          key: \"rfp-\".concat(rfp.id),\n          to: \"/research/\".concat(rfp.research_area, \"/\").concat(rfp.identifier),\n          className: css(styles.ResultsList_resultRow),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(ResultRow, {\n          rfpId: rfp.id,\n          title: rfp.title,\n          company: rfp.company.company_name,\n          isPartner: rfp.company.is_partner,\n          summary: rfp.summary,\n          therapeuticArea: rfp.therapeutic_area,\n          innovationTypes: rfp.innovation_types.map(function (innovType) {\n            return innovType.value;\n          }),\n          saveRFP: saveRFP,\n          unsaveRFP: unsaveRFP,\n          isUpdatingSaveRFP: isUpdatingSaveRFP[rfp.id],\n          isSaved: savedRFPs[rfp.id],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }));\n      }));\n    }\n  }]);\n\n  return ResultsList;\n}(PureComponent);\n\nResultsList.propTypes = {\n  onlySaved: PropTypes.bool,\n  onlyPartners: PropTypes.bool,\n  filters: PropTypes.object,\n  searchTerm: PropTypes.string,\n  isUpdatingSaveRFP: PropTypes.object,\n  savedRFPs: PropTypes.object,\n  saveRFP: PropTypes.func,\n  unsaveRFP: PropTypes.func,\n  updateResultList: PropTypes.func\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    filters: state.defaultReducer.filters,\n    searchTerm: state.defaultReducer.searchTerm,\n    isUpdatingSaveRFP: state.defaultReducer.isUpdatingSaveRFP,\n    savedRFPs: state.defaultReducer.savedRFPs,\n    resultList: state.defaultReducer.resultList\n  };\n};\n\nvar mapDispatchToProps = {\n  saveRFP: saveRFPAction,\n  unsaveRFP: unsaveRFPAction,\n  initializeSaveRFPs: initializeSaveRFPsAction,\n  updateResultList: updateResultListAction\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsList);","map":{"version":3,"sources":["/Volumes/Work/work/dev/project/projects/halo/app/javascript/src/marketplace/components/ResultsList/ResultsList.jsx"],"names":["React","PureComponent","PropTypes","connect","Link","intersection","css","StyleSheet","Button","Grid","COLORS","saveRFP","saveRFPAction","unsaveRFP","unsaveRFPAction","initializeSaveRFPs","initializeSaveRFPsAction","updateResultList","updateResultListAction","ResultRow","styles","create","ResultsList_noResultsText","textAlign","fontSize","ResultsList_resultRow","textDecoration","ResultsList","props","componentWillMount","gon","saved_rfps","filterResults","filters","researchArea","innovationType","savedRFPs","searchTerm","onlySaved","onlyPartners","company","filteredResults","rfp_results","filter","result","hasResearchArea","length","map","ra","areas_of_expertise_mapping","includes","therapeutic_area","hasInnovationType","it","innovation_type_mapping","innovation_types","value","matchesTitle","re","RegExp","_","escapeRegExp","isMatch","test","title","isSaved","id","isPartner","is_partner","isCompany","setState","state","prevProps","prevState","resultList","isUpdatingSaveRFP","rfp","research_area","identifier","company_name","summary","innovType","propTypes","bool","object","string","func","mapStateToProps","defaultReducer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { intersection } from 'lodash';\nimport { css, StyleSheet } from 'aphrodite';\nimport { Button, Grid } from \"semantic-ui-react\";\n\nimport { COLORS } from '../../../../constants';\nimport {\n  saveRFP as saveRFPAction,\n  unsaveRFP as unsaveRFPAction,\n  initializeSaveRFPs as initializeSaveRFPsAction,\n  updateResultList as updateResultListAction,\n} from '../../actions/defaultActions';\nimport ResultRow from '../ResultRow';\n\nconst styles = StyleSheet.create({\n  ResultsList_noResultsText: {\n    textAlign: 'center',\n    fontSize: '14px',\n  },\n  ResultsList_resultRow: {\n    textDecoration: 'none',\n  },\n});\n\nclass ResultsList extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredResults: [],\n    };\n  }\n\n  componentWillMount = () => {\n    const {\n      initializeSaveRFPs,\n    } = this.props;\n\n    initializeSaveRFPs(gon.saved_rfps || {});\n\n    this.filterResults();\n  }\n\n  filterResults = () => {\n    const {\n      filters: { researchArea, innovationType },\n      savedRFPs,\n      searchTerm,\n      onlySaved,\n      onlyPartners,\n      company,\n    } = this.props;\n\n    const filteredResults = gon.rfp_results.filter((result) => {\n      let hasResearchArea = true;\n      if (researchArea && researchArea.length > 0) {\n        hasResearchArea = researchArea.map(ra => gon.areas_of_expertise_mapping[ra]).includes(result.therapeutic_area);\n      }\n\n      let hasInnovationType = true;\n      if (innovationType && innovationType.length > 0) {\n        hasInnovationType = intersection(\n          innovationType.map(it => gon.innovation_type_mapping[it]),\n          result.innovation_types.map(it => it.value)\n        ).length > 0;\n      }\n\n      let matchesTitle = true;\n      const re = new RegExp(_.escapeRegExp(searchTerm), 'i');\n      const isMatch = result => re.test(result.title);\n      if (searchTerm.length > 0) {\n        matchesTitle = isMatch(result);\n      }\n\n      let isSaved = true;\n      if (onlySaved) {\n        isSaved = savedRFPs[result.id] ? true : false;\n      }\n\n      let isPartner = true;\n      if (onlyPartners) {\n        isPartner = result.company.is_partner;\n      }\n\n      let isCompany = true;\n      if (company) {\n        isCompany = result.company.id === company.id;\n      }\n\n      return hasResearchArea && hasInnovationType && matchesTitle && isSaved && isPartner && isCompany;\n    });\n\n    this.setState({\n      filteredResults,\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      resultList,\n      updateResultList,\n    } = this.props;\n\n    if (prevProps !== this.props) {\n      this.filterResults();\n    }\n    if (prevState.filteredResults != this.state.filteredResults &&\n      (resultList.length !== this.state.filteredResults.length)) {\n      updateResultList(this.state.filteredResults);\n    }\n  }\n\n  render() {\n    const {\n      isUpdatingSaveRFP,\n      savedRFPs,\n      saveRFP,\n      unsaveRFP,\n      resultList,\n    } = this.props;\n\n    const { filteredResults } = this.state;\n\n    return (\n      <div>\n        {filteredResults.length === 0 &&\n          <div className={css(styles.ResultsList_noResultsText)}>\n            No results match these filters\n          </div>}\n        {\n          filteredResults.map((rfp) => {\n            return (\n              <Link\n                key={`rfp-${rfp.id}`}\n                to={`/research/${rfp.research_area}/${rfp.identifier}`}\n                className={css(styles.ResultsList_resultRow)}\n              >\n                <ResultRow\n                  rfpId={rfp.id}\n                  title={rfp.title}\n                  company={rfp.company.company_name}\n                  isPartner={rfp.company.is_partner}\n                  summary={rfp.summary}\n                  therapeuticArea={rfp.therapeutic_area}\n                  innovationTypes={rfp.innovation_types.map(innovType => innovType.value)}\n                  saveRFP={saveRFP}\n                  unsaveRFP={unsaveRFP}\n                  isUpdatingSaveRFP={isUpdatingSaveRFP[rfp.id]}\n                  isSaved={savedRFPs[rfp.id]}\n                />\n              </Link>\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n\nResultsList.propTypes = {\n  onlySaved: PropTypes.bool,\n  onlyPartners: PropTypes.bool,\n  filters: PropTypes.object,\n  searchTerm: PropTypes.string,\n  isUpdatingSaveRFP: PropTypes.object,\n  savedRFPs: PropTypes.object,\n  saveRFP: PropTypes.func,\n  unsaveRFP: PropTypes.func,\n  updateResultList: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    filters: state.defaultReducer.filters,\n    searchTerm: state.defaultReducer.searchTerm,\n    isUpdatingSaveRFP: state.defaultReducer.isUpdatingSaveRFP,\n    savedRFPs: state.defaultReducer.savedRFPs,\n    resultList: state.defaultReducer.resultList,\n  };\n};\n\nconst mapDispatchToProps = {\n  saveRFP: saveRFPAction,\n  unsaveRFP: unsaveRFPAction,\n  initializeSaveRFPs: initializeSaveRFPsAction,\n  updateResultList: updateResultListAction,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ResultsList);\n"]},"metadata":{},"sourceType":"module"}